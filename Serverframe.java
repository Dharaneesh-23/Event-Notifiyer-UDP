/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package npl_project_test;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import com.mysql.jdbc.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JTable;
import npl_project_server.EventDB;

/**
 *
 * @author Dell
 */
public class Serverframe extends javax.swing.JFrame {

    /**
     * Creates new form Serverframe
     */
    public Serverframe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client IP", "Date", "Time", "Request Type", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);
        updateStatusBar();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton1.setText("Close Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Re-load tables");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clients"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton3.setText("Start server");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("EventDB");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton1))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(socket !=null){
            socket.close();
            JOptionPane.showMessageDialog(rootPane, "Server Closed");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        startServer();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        connectToDatabase();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        connectToDatabase();
    }//GEN-LAST:event_formWindowOpened

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new EventDB().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
    private void updateStatusBar() {
        String ipadd = null;
        Date currentDate = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

        String date = dateFormat.format(currentDate);
        String time = timeFormat.format(currentDate);
        try{
            InetAddress ip = InetAddress.getLocalHost();
            ipadd = ip.getHostAddress();
        }catch(UnknownHostException e){
            JOptionPane.showMessageDialog(this, "IP not found");
        }
        
        if(socket!=null){
            serverString = "Server started on "+ipadd+" and listening on port 888";
        }
        else{
            serverString = "Server not started. Start server to get client requests         ";
        }
        jLabel1.setText(serverString+"  Date: "+date+"          Time: "+time);

        // Update the status bar every second
        Timer timer = new Timer(1000, e -> updateStatusBar());
        timer.start();
    }
    private void connectToDatabase(){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_npl_project?characterEncoding=latin1","root","password@123");
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM server_det");
            while(rs.next()){
                String e_id = rs.getString("client_ip");
                String e_name = rs.getString("date");
                String e_date = rs.getString("time");
                String e_loc = rs.getString("request_type");
                String e_org = rs.getString("status");
                String tbl_data[] = {e_id,e_name,e_date,e_loc,e_org};
                if(!existsInTable(jTable1,tbl_data)){
                    DefaultTableModel tb_model = (DefaultTableModel) jTable1.getModel();
                    tb_model.addRow(tbl_data);
                }
                String cli[] = {e_id};
                if(!existsInTable(jTable2,cli)){
                    DefaultTableModel tb_model = (DefaultTableModel) jTable2.getModel();
                    tb_model.addRow(tbl_data);
                }
                
                
            }
            connection.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }
    private void startServer() {
        try {
            // Create a DatagramSocket to listen on port 888
            socket = new DatagramSocket(888);
            JOptionPane.showMessageDialog(rootPane, "Server started");
            //running = true;

            // Start a new thread to receive packets from clients
            Thread receiveThread = new Thread(() -> {
                try {
                    while (true) {
                        byte[] strbyte = new byte[1024];
                        DatagramPacket strpacket = new DatagramPacket(strbyte,strbyte.length);
                        socket.receive(strpacket);
                        String str = new String(strpacket.getData(),0,strpacket.getLength());
                        String[] arr = str.split("@");
                        System.out.println(arr.length);
                    //server_det db details
                        String clientip = strpacket.getAddress().getHostAddress();
                        Date currentDate = new Date();
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
                        String s_date = dateFormat.format(currentDate);
                        String s_time = timeFormat.format(currentDate);
                        String s_req =null;
                        String s_status = null;
                    //process according to the client req
                        if(arr[0].equals("2")){
                            s_req = "new event";
                            int checkSum= checksum(str)-2;
                            JOptionPane.showMessageDialog(rootPane, "Received new event from "+clientip+"\nCalculated checkSum:"+checkSum);
                            Connection conn = null;
                            Statement stmt = null;
                            try {
                                Class.forName("com.mysql.jdbc.Driver");
                                conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/db_npl_project?characterEncoding=latin1", "root", "password@123");
                                stmt = (Statement) conn.createStatement();
                                String query1 = "INSERT INTO event_info VALUES ('"+arr[1]+"','"+arr[2]+"','"+arr[3]+"','"+arr[4]+"','"+arr[5]+"')";
                                stmt.executeUpdate(query1);
                                JOptionPane.showMessageDialog(this, "Record is inserted in the table successfully..................");
                                s_status = "completed";
                                //this.setVisible(false);
                            } catch (SQLException excep) {
                                JOptionPane.showMessageDialog(this, excep);
                                s_status = "Failed";
                            } catch (Exception excep) {
                                JOptionPane.showMessageDialog(this, excep);
                                s_status = "Failed";
                            } finally {
                                try {
                                    if (stmt != null)
                                        conn.close();
                                } catch (SQLException se) {}
                            try {
                                if (conn != null)
                                    conn.close();
                            } catch (SQLException se) {
                                JOptionPane.showMessageDialog(this, se);
                            }
                            try {
                                    Class.forName("com.mysql.jdbc.Driver");
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(rootPane, e);
                                }
                            try{
                                Connection s_conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/db_npl_project?characterEncoding=latin1", "root", "password@123");
                                Statement s_stmt = (Statement) s_conn.createStatement();
                                String query1 = "INSERT INTO server_det VALUES ('"+clientip+"','"+s_date+"','"+s_time+"','"+s_req+"','"+s_status+"')";
                                s_stmt.executeUpdate(query1);
                                s_conn.close();
                            }catch(SQLException e){
                                JOptionPane.showMessageDialog(rootPane, e);
                            }
                        }
                    }
                        /*byte[] imgbyte = new byte[50000];
                        DatagramPacket imgpacket = new DatagramPacket(imgbyte,imgbyte.length);
                        socket.receive(imgpacket);
                        byte[] imgreceived = imgpacket.getData();
                        FileOutputStream fos = new FileOutputStream("C:/Users/Dell/Desktop/receivedimg.png");
                        fos.write(imgbyte,0,imgpacket.getLength());
                        fos.close();
                        JOptionPane.showMessageDialog(rootPane, "Image received and saved");
                        /*byte[] buffer = new byte[65536];
                        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                        // Receive a packet from a client
                        socket.receive(packet);
                        JOptionPane.showMessageDialog(rootPane, "packet received");
                        // Extract the received data
                        byte[] data = packet.getData();
                        int length = packet.getLength();
                        String receivedData = new String(data, 0, length);

                        // Split the received data using a comma as a delimiter
                        String[] dataArray = receivedData.split(",");
                        
                        System.out.println("Received from client: "+dataArray.length);
                        // Check if the received data contains both string and image
                        if (dataArray.length < 2) {
                            String receivedString = dataArray[0];
                            byte[] receivedImageBytes = dataArray[1].getBytes();
                            System.out.println("received image");
                            // Save the received image to a file
                            ByteArrayInputStream imageStream = new ByteArrayInputStream(receivedImageBytes);
                            BufferedImage receivedImage = ImageIO.read(imageStream);
                            ImageIO.write(receivedImage, "png", new File("C:/Users/Dell/Desktop/received.png"));
                            JOptionPane.showMessageDialog(rootPane, receivedString);
                            // Display the received string and image
                            //displayReceivedData(receivedString, receivedImage);
                        }*/
                    }
                } catch (SocketException ex) {
                    // Handle socket exception
                    JOptionPane.showMessageDialog(rootPane, "Socket Exception: " + ex.getMessage());
                } catch (IOException ex) {
                    // Handle IO exception
                    JOptionPane.showMessageDialog(rootPane, "IO Exception: " + ex.getMessage());
                }
            });

            // Start the receive thread
            receiveThread.start();
        } catch (SocketException ex) {
            // Handle socket exception
            JOptionPane.showMessageDialog(rootPane, ex);
            //JOptionPane.showMessageDialog(rootPane, "Socket Exception1: " + ex.getMessage());
        }
    }
    private int checksum(String S){
        int sum=0;
        for(int i=0;i<S.length();i++){
            sum = sum+1;
        }
        return sum;
    }
    
    private boolean existsInTable(JTable table, Object[] entry) {

    // Get row and column count
    int rowCount = table.getRowCount();
    int colCount = table.getColumnCount();

    // Get Current Table Entry
    String curEntry = "";
    for (Object o : entry) {
        String e = o.toString();
        curEntry = curEntry + " " + e;
    }

    // Check against all entries
    for (int i = 0; i < rowCount; i++) {
        String rowEntry = "";
        for (int j = 0; j < colCount; j++)
            rowEntry = rowEntry + " " + table.getValueAt(i, j).toString();
        if (rowEntry.equalsIgnoreCase(curEntry)) {
            return true;
        }
    }
    return false;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Serverframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Serverframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Serverframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Serverframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Serverframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
    private java.net.DatagramPacket strpacket;
    private java.net.DatagramPacket imgpacket;
    private java.net.DatagramSocket socket;
    private String serverString;
    
}
